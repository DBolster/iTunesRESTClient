/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package itunesapiclient;

import ResultTypes.Album;
import ResultTypes.Artist;
import ResultTypes.Song;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;

/**
 * Implements the main GUI background logic
 * Assignment 2 Final
 * @author Douglas.Bolster@student.sl.on.ca
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        initComponents();
        buttonGroup_SearchChoice.add(jRadioButton_SearchByArtistName);
        buttonGroup_SearchChoice.add(jRadioButton_SearchByID);
        jComboBox_AlbumResults.setEnabled(false);
        jComboBox_SongResults.setEnabled(false);
        jButton_iTunesAlbumLink.setEnabled(false);
        jButton_iTunesSongLink.setEnabled(false);
        jLabel_ErrorMsg.setText("");
    }
    
    /**
     * Action listener class for the Song Combo Box 
     */
    private class songComboBoxActionListener implements ActionListener {

        String[] albumNames;
        
        /**
         * Receives and array of album names taken from the Song Arraylist
         * length is the same as the # of songs
         * @param albumNamesFromSong 
         */
        songComboBoxActionListener(String[] albumNamesFromSong) {
            albumNames = albumNamesFromSong;
        }
        
        /**
         * Checks the current index of the Song Combobox and sets the 
         * album title jLabel text to the same index within the
         * Albums array
         * @param e 
         */
        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("*************Inside ComboBox Action Listener**************************");
            for (String name : albumNames) {
                System.out.println(name);
            }
            if (jComboBox_SongResults.getItemCount() > 0) {
                jLabel_SongAlbumTitleResult.setText(albumNames[jComboBox_SongResults.getSelectedIndex()]);
            }

        }
    }


    private class ButtonSongLinkActionListener implements ActionListener {

        String[] songLinks;
        
         /**
         * Receives and array of Song URLs taken from the Song Arraylist
         * length is the same as the # of songs
         * @param songLinksIn 
         */
        public ButtonSongLinkActionListener(String[] songLinksIn) {
            songLinks = songLinksIn;

        }
        
        /**
         * Sets the URL value of the button to the current Song URL using the songlinks
         * array at the same index taken from the Song combobox
         * @param e 
         */
        @Override
        public void actionPerformed(ActionEvent e) {
            if (jComboBox_SongResults.getItemCount() > 0) {
                try {
                    Desktop.getDesktop().browse(new URI(songLinks[jComboBox_SongResults.getSelectedIndex()]));
                } catch (URISyntaxException ex) {
                    System.out.println("uri exception");

                } catch (IOException ex) {
                    System.out.println("IO Error");
                }
            }
        }

    }

    private class ButtonAlbumLinkActionListener implements ActionListener {

        String[] albumLinks;
        
        /**
         * Receives and array of Album URLs taken from the Album Arraylist
         * length is the same as the # of albums
         * @param songLinksInput 
         */
        public ButtonAlbumLinkActionListener(String[] albumLinksInput) {
            albumLinks = albumLinksInput;

        }
        
         /**
         * Sets the URL value of the button to the current Album URL using the albumlinks
         * array at the same index taken from the Album combobox
         * @param e 
         */
        @Override
        public void actionPerformed(ActionEvent e) {
            if (jComboBox_AlbumResults.getItemCount() > 0) {
                try {
                    Desktop.getDesktop().browse(new URI(albumLinks[jComboBox_AlbumResults.getSelectedIndex()]));
                } catch (URISyntaxException ex) {
                    System.out.println("uri exception");

                } catch (IOException ex) {
                    System.out.println("IO Error");
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_SearchChoice = new javax.swing.ButtonGroup();
        jButton_GetResults = new javax.swing.JButton();
        jButton_ClearResults = new javax.swing.JButton();
        jTextField_ArtistInput = new javax.swing.JTextField();
        jLabel_ArtistName = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel_Songs = new javax.swing.JPanel();
        jComboBox_SongResults = new javax.swing.JComboBox<>();
        jLabel_SongName = new javax.swing.JLabel();
        jLabel_SongAlbum = new javax.swing.JLabel();
        jLabel_SongAlbumTitleResult = new javax.swing.JLabel();
        jButton_iTunesSongLink = new javax.swing.JButton();
        jPanel_Albums = new javax.swing.JPanel();
        jComboBox_AlbumResults = new javax.swing.JComboBox<>();
        jLabel_AlbumName = new javax.swing.JLabel();
        jLabel_AlbumLink = new javax.swing.JLabel();
        jButton_iTunesAlbumLink = new javax.swing.JButton();
        jLabel_ErrorMsg = new javax.swing.JLabel();
        jRadioButton_SearchByArtistName = new javax.swing.JRadioButton();
        jRadioButton_SearchByID = new javax.swing.JRadioButton();
        jPanel_Image = new javax.swing.JPanel();
        jLabel_Image = new javax.swing.JLabel();
        jLabel_myName = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("iTunes-O-Matic 3000");

        jButton_GetResults.setText("Search");
        jButton_GetResults.setToolTipText("");
        jButton_GetResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_GetResultsActionPerformed(evt);
            }
        });

        jButton_ClearResults.setText("Clear Results");
        jButton_ClearResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ClearResultsActionPerformed(evt);
            }
        });

        jLabel_ArtistName.setText("Artist:");

        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setName("Albums"); // NOI18N

        jPanel_Songs.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel_SongName.setText("Songs:");

        jLabel_SongAlbum.setText("Album:");

        jLabel_SongAlbumTitleResult.setText("N/A");

        jButton_iTunesSongLink.setText("Find Song on iTunes");

        javax.swing.GroupLayout jPanel_SongsLayout = new javax.swing.GroupLayout(jPanel_Songs);
        jPanel_Songs.setLayout(jPanel_SongsLayout);
        jPanel_SongsLayout.setHorizontalGroup(
            jPanel_SongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_SongsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_SongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_SongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel_SongName)
                        .addGroup(jPanel_SongsLayout.createSequentialGroup()
                            .addComponent(jLabel_SongAlbum)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel_SongAlbumTitleResult))
                        .addComponent(jComboBox_SongResults, 0, 200, Short.MAX_VALUE))
                    .addComponent(jButton_iTunesSongLink))
                .addContainerGap(229, Short.MAX_VALUE))
        );
        jPanel_SongsLayout.setVerticalGroup(
            jPanel_SongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_SongsLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel_SongName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox_SongResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_SongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_SongAlbum)
                    .addComponent(jLabel_SongAlbumTitleResult))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_iTunesSongLink)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Songs", null, jPanel_Songs, "Songs");
        jPanel_Songs.getAccessibleContext().setAccessibleName("Songs");
        jPanel_Songs.getAccessibleContext().setAccessibleDescription("Song results");

        jPanel_Albums.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel_Albums.setToolTipText("Albums");

        jLabel_AlbumName.setText("Albums:");

        jLabel_AlbumLink.setText("Album Link to iTunes:");
        jLabel_AlbumLink.setToolTipText("Album Link to iTunes:");

        jButton_iTunesAlbumLink.setText("Find Album on iTunes");

        javax.swing.GroupLayout jPanel_AlbumsLayout = new javax.swing.GroupLayout(jPanel_Albums);
        jPanel_Albums.setLayout(jPanel_AlbumsLayout);
        jPanel_AlbumsLayout.setHorizontalGroup(
            jPanel_AlbumsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_AlbumsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_AlbumsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_AlbumName)
                    .addGroup(jPanel_AlbumsLayout.createSequentialGroup()
                        .addComponent(jLabel_AlbumLink)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_iTunesAlbumLink))
                    .addComponent(jComboBox_AlbumResults, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(185, Short.MAX_VALUE))
        );
        jPanel_AlbumsLayout.setVerticalGroup(
            jPanel_AlbumsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_AlbumsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_AlbumName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox_AlbumResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel_AlbumsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_AlbumLink)
                    .addComponent(jButton_iTunesAlbumLink))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        jLabel_AlbumLink.getAccessibleContext().setAccessibleDescription("Album Link to iTunes");

        jTabbedPane1.addTab("Albums", null, jPanel_Albums, "Albums");
        jPanel_Albums.getAccessibleContext().setAccessibleName("Albums");
        jPanel_Albums.getAccessibleContext().setAccessibleDescription("Album results");

        jRadioButton_SearchByArtistName.setText("Search by Artist Name");

        jRadioButton_SearchByID.setSelected(true);
        jRadioButton_SearchByID.setText("Search by Artist ID");

        jLabel_Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/note.png"))); // NOI18N

        javax.swing.GroupLayout jPanel_ImageLayout = new javax.swing.GroupLayout(jPanel_Image);
        jPanel_Image.setLayout(jPanel_ImageLayout);
        jPanel_ImageLayout.setHorizontalGroup(
            jPanel_ImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_ImageLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel_Image)
                .addContainerGap())
        );
        jPanel_ImageLayout.setVerticalGroup(
            jPanel_ImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_ImageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_Image)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel_myName.setForeground(new java.awt.Color(153, 153, 153));
        jLabel_myName.setText("douglas.bolster@student.sl.on.ca");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_GetResults)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_ClearResults)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel_ErrorMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jRadioButton_SearchByArtistName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jRadioButton_SearchByID))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel_ArtistName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField_ArtistInput, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(37, 37, 37))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel_myName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jPanel_Image, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_ArtistInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_ArtistName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton_SearchByArtistName)
                            .addComponent(jRadioButton_SearchByID))
                        .addGap(13, 13, 13)
                        .addComponent(jLabel_myName))
                    .addComponent(jPanel_Image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_ErrorMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_GetResults)
                        .addComponent(jButton_ClearResults)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_GetResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_GetResultsActionPerformed
        Artist artist;
        String id;
        String input = jTextField_ArtistInput.getText().trim();
        iTunesRESTClient client = new iTunesRESTClient();
        ArrayList<Album> albums;
        ArrayList<Song> songs;
        String[] albumsFromSongs;
        String[] songLinks;
        String[] albumLinks;
        jComboBox_AlbumResults.removeAllItems();
        jComboBox_SongResults.removeAllItems();
        jComboBox_AlbumResults.setEnabled(false);
        jComboBox_SongResults.setEnabled(false);
        jButton_iTunesAlbumLink.setEnabled(false);
        jButton_iTunesSongLink.setEnabled(false);
        jLabel_ErrorMsg.setText("");

        if (input.equals("")) {
            jLabel_ErrorMsg.setText("Search box cannot be blank");
            return;
        }
        
        //Begin by checking the radio button selection
        if (jRadioButton_SearchByID.isSelected()) {
            try {
                Integer.parseInt(input);
            } catch (NumberFormatException e) {
                jLabel_ErrorMsg.setText("Artist ID must be numeric");
                return;
            }

            if (client.getArtist(input) == null) {
                jLabel_ErrorMsg.setText("No Results Found");
                return;
            }
            //Get results from client
            artist = client.getArtist(input);
            albums = client.getAlbum(input);
            songs = client.getSongs(input);
            
            //Create arrays for matching the text boxes
            albumsFromSongs = new String[songs.size()];
            songLinks = new String[songs.size()];
            albumLinks = new String[albums.size()];
            int i = 0, j = 0;
            
            //load the comboboxes and arrays at the same time, the arrays
            //have the matching index with # of items in the comboboxes
            for (Album album : albums) {
                jComboBox_AlbumResults.addItem(album.getCollectionName());
                albumLinks[i] = album.getCollectionViewUrl();
                i++;
            }
            for (Song song : songs) {
                jComboBox_SongResults.addItem(song.getTrackName());
                albumsFromSongs[j] = song.getCollectionName();
                songLinks[j] = song.getTrackViewUrl();
                j++;

            }
            
            //Enable the results comboboxes and buttons
            jComboBox_AlbumResults.setEnabled(true);
            jComboBox_SongResults.setEnabled(true);
            jLabel_SongAlbumTitleResult.setText(albumsFromSongs[0]);    

            jButton_iTunesAlbumLink.setEnabled(true);
            jButton_iTunesSongLink.setEnabled(true);
             //Clear and Set Action Listeners to perform the text and button changes from the comboboxes
            clearActionListeners();
            jComboBox_SongResults.addActionListener(new songComboBoxActionListener(albumsFromSongs));
            jButton_iTunesSongLink.addActionListener(new ButtonSongLinkActionListener(songLinks));
            jButton_iTunesAlbumLink.addActionListener(new ButtonAlbumLinkActionListener(albumLinks));

        } else if (jRadioButton_SearchByArtistName.isSelected()) {
            input = input.replaceAll(" {1,}", "+");
            input = input.toLowerCase();
            if (client.getArtistIdFromName(input) == null) {
                jLabel_ErrorMsg.setText("No Results Found");
                return;
            }
            id = client.getArtistIdFromName(input);
            artist = client.getArtist(id);
            albums = client.getAlbum(id);
            songs = client.getSongs(id);

            albumsFromSongs = new String[songs.size()];
            songLinks = new String[songs.size()];
            albumLinks = new String[albums.size()];
            int i = 0, j = 0;
            for (Album album : albums) {
                jComboBox_AlbumResults.addItem(album.getCollectionName());
                albumLinks[i] = album.getCollectionViewUrl();
                i++;

            }

            for (Song song : songs) {
                jComboBox_SongResults.addItem(song.getTrackName());
                albumsFromSongs[j] = song.getCollectionName();
                songLinks[j] = song.getTrackViewUrl();
                j++;

            }
            
            jComboBox_AlbumResults.setEnabled(true);
            jComboBox_SongResults.setEnabled(true);
            jLabel_SongAlbumTitleResult.setText(albumsFromSongs[0]); 
            
            //for(String albumName: albumsFromSongs){
            //    System.out.println("*************Inside Search Button Action Listener**************************");
            //    System.out.println(albumName);
            //}
                        
            jButton_iTunesAlbumLink.setEnabled(true);
            jButton_iTunesSongLink.setEnabled(true);

            clearActionListeners();
            jComboBox_SongResults.addActionListener(new songComboBoxActionListener(albumsFromSongs));
            jButton_iTunesSongLink.addActionListener(new ButtonSongLinkActionListener(songLinks));
            jButton_iTunesAlbumLink.addActionListener(new ButtonAlbumLinkActionListener(albumLinks));
        }
    }//GEN-LAST:event_jButton_GetResultsActionPerformed

    private void clearActionListeners() {
        ActionListener[] jComboBoxSongActionListeners = jComboBox_SongResults.getActionListeners();
        for (ActionListener comboBoxSongResultsListener : jComboBoxSongActionListeners) {
            jComboBox_SongResults.removeActionListener(comboBoxSongResultsListener);
        }

        ActionListener[] jButtonAlbumLinkActionListeners = jButton_iTunesAlbumLink.getActionListeners();
        for (ActionListener jButtonAlbumLinkListener : jButtonAlbumLinkActionListeners) {
            jButton_iTunesAlbumLink.removeActionListener(jButtonAlbumLinkListener);
        }

        ActionListener[] jButtonSongLinkListeners = jButton_iTunesSongLink.getActionListeners();
        for (ActionListener jButtonSongLinkListener : jButtonSongLinkListeners) {
            jButton_iTunesSongLink.removeActionListener(jButtonSongLinkListener);
        }
    }

    
    /**
     * Clears results related comboboxes and labels
     * @param evt 
     */
    private void jButton_ClearResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ClearResultsActionPerformed
        jTextField_ArtistInput.setText("");
        jLabel_ErrorMsg.setText("");
        jLabel_SongAlbumTitleResult.setText("");
        jComboBox_SongResults.removeAllItems();
        jComboBox_AlbumResults.removeAllItems();
        jComboBox_SongResults.setEnabled(false);
        jComboBox_AlbumResults.setEnabled(false);
    }//GEN-LAST:event_jButton_ClearResultsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_SearchChoice;
    private javax.swing.JButton jButton_ClearResults;
    private javax.swing.JButton jButton_GetResults;
    private javax.swing.JButton jButton_iTunesAlbumLink;
    private javax.swing.JButton jButton_iTunesSongLink;
    private javax.swing.JComboBox<String> jComboBox_AlbumResults;
    private javax.swing.JComboBox<String> jComboBox_SongResults;
    private javax.swing.JLabel jLabel_AlbumLink;
    private javax.swing.JLabel jLabel_AlbumName;
    private javax.swing.JLabel jLabel_ArtistName;
    private javax.swing.JLabel jLabel_ErrorMsg;
    private javax.swing.JLabel jLabel_Image;
    private javax.swing.JLabel jLabel_SongAlbum;
    private javax.swing.JLabel jLabel_SongAlbumTitleResult;
    private javax.swing.JLabel jLabel_SongName;
    private javax.swing.JLabel jLabel_myName;
    private javax.swing.JPanel jPanel_Albums;
    private javax.swing.JPanel jPanel_Image;
    private javax.swing.JPanel jPanel_Songs;
    private javax.swing.JRadioButton jRadioButton_SearchByArtistName;
    private javax.swing.JRadioButton jRadioButton_SearchByID;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField_ArtistInput;
    // End of variables declaration//GEN-END:variables
}

